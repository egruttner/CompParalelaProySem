import os
import networkx as nx
import plotly.graph_objs as go

# Function to load grid size from the file generated by C++
def cargar_tamano(ruta_tamano):
    with open(ruta_tamano, 'r') as file:
        tamano = list(map(int, file.readline().strip().split()))
    return tamano[0], tamano[1]

# Function to load the graph from the file generated by C++
def cargar_grafo(ruta_grafo):
    G = nx.DiGraph()  # Directed graph
    with open(ruta_grafo, 'r') as file:
        for line in file:
            line = line.strip()
            if line:  # Ignore blank lines
                partes = line.split(':')
                nodo_str = partes[0].strip()
                if nodo_str.isdigit():
                    nodo_actual = int(nodo_str)
                    conexiones = partes[1].strip().split()
                    for conexion in conexiones:
                        vecino, peso = map(int, conexion.split(','))
                        G.add_edge(nodo_actual, vecino, weight=peso)  # Add edge with weight
    return G

# Function to load all routes from files generated by C++
def cargar_rutas(directorio_rutas):
    rutas = []
    for filename in os.listdir(directorio_rutas):
        if filename.endswith('.txt'):
            with open(os.path.join(directorio_rutas, filename), 'r') as file:
                ruta = list(map(int, file.readline().strip().split()))
                rutas.append(ruta)
    return rutas

# Function to visualize the graph as a grid with the found routes
def visualizar_grafo(ruta_tamano, ruta_grafo, directorio_rutas):
    filas, columnas = cargar_tamano(ruta_tamano)
    G = cargar_grafo(ruta_grafo)

    # Configure node positions in a grid
    pos = {i: (i % columnas, -(i // columnas)) for i in G.nodes()}

    # Verify that all nodes have assigned positions
    for nodo in G.nodes():
        if nodo not in pos:
            print(f"Warning: Node {nodo} does not have an assigned position.")
            pos[nodo] = (nodo % columnas, -(nodo // columnas))  # Assign a default position

    # Get and draw routes from files generated by C++
    rutas = cargar_rutas(directorio_rutas)

    # Create lists to store graph and route data
    edge_x = []
    edge_y = []
    edge_text = []
    
    for edge in G.edges(data=True):
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x.append(x0)
        edge_x.append(x1)
        edge_x.append(None)
        edge_y.append(y0)
        edge_y.append(y1)
        edge_y.append(None)
        edge_text.append(f'{edge[0]} -> {edge[1]}: {edge[2]["weight"]}')
    
    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=0.5, color='#888'),
        hoverinfo='none',
        mode='lines'
    )

    node_x = []
    node_y = []
    node_text = []

    for node in G.nodes():
        x, y = pos[node]
        node_x.append(x)
        node_y.append(y)
        node_text.append(str(node))
    
    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers',
        hoverinfo='none',
        marker=dict(
            color='skyblue',
            size=2,
            line_width=0.5))

    # Add routes
    fig = go.Figure(data=[edge_trace, node_trace])

    # Generate a list of colors
    colores = ['#%06X' % (i * 0xAA1100 // len(rutas)) for i in range(len(rutas))]

    for i, ruta in enumerate(rutas):
        path_x = []
        path_y = []
        for node in ruta:
            if node in pos:
                x, y = pos[node]
                path_x.append(x)
                path_y.append(y)
            else:
                print(f"Warning: Node {node} in route {i+1} does not have an assigned position.")
        fig.add_trace(go.Scatter(
            x=path_x, y=path_y,
            mode='lines',
            line=dict(color=colores[i], width=2),
            name=f'Ruta {i+1}',
            showlegend=False))

        # Add start nodes
        if ruta:
            x0, y0 = pos.get(ruta[0], (None, None))
            if x0 is not None and y0 is not None:
                fig.add_trace(go.Scatter(
                    x=[x0], y=[y0],
                    mode='markers',
                    marker=dict(color=colores[i], size=5),
                    name=f'Inicio {ruta[0]}',
                    showlegend=False))

    fig.update_layout(title='Rutas encontradas en el grafo',
                      showlegend=False,
                      xaxis=dict(showgrid=False, zeroline=False),
                      yaxis=dict(showgrid=False, zeroline=False))

    fig.show()

# Visualize the graph generated by C++ with the found routes
if __name__ == '__main__':
    import sys
    if len(sys.argv) != 4:
        print("Usage: python script.py <ruta_tamano> <ruta_grafo> <directorio_rutas>")
        sys.exit(1)

    ruta_tamano = sys.argv[1]
    ruta_grafo = sys.argv[2]
    directorio_rutas = sys.argv[3]
    visualizar_grafo(ruta_tamano, ruta_grafo, directorio_rutas)
